---
title: "UFC RESEARCH QUESTION 1"
author: ""
subtitle: "Due 8th December, 2024"
format: pdf
---

```{r, results = FALSE}
ufc <- read.csv("ufc-master.csv")

# View the data
head(ufc)
```

```{r}
# data cleaning cell
colSums(is.na(ufc)) 

# removing the data which has way too many missing values

ufc = subset(ufc, select = -c(BMatchWCRank, RMatchWCRank, RWFlyweightRank, 
                              RWFeatherweightRank, RWStrawweightRank, RWBantamweightRank, 
                              RHeavyweightRank, RLightHeavyweightRank, RMiddleweightRank, 
                              RWelterweightRank, RLightweightRank, RFeatherweightRank, 
                              RBantamweightRank, RFlyweightRank, RPFPRank, BWFlyweightRank, 
                              BWFeatherweightRank, BWStrawweightRank, BWBantamweightRank, 
                              BHeavyweightRank, BLightHeavyweightRank, BMiddleweightRank, 
                              BWelterweightRank, BLightweightRank, BFeatherweightRank, 
                              BBantamweightRank, BFlyweightRank, BPFPRank))

library(dplyr)

# removing all missing value rows from the columns of interest
ufc_clean <- ufc %>%
  filter(
    !is.na(RedAvgSubAtt),
    !is.na(BlueAvgSubAtt),
    !is.na(BlueReachCms), 
    !is.na(RedReachCms), 
    !is.na(BlueAvgSigStrLanded), 
    !is.na(RedAvgSigStrLanded),
    !is.na(TotalFightTimeSecs),
    !is.na(WeightClass)
  )
nrow(ufc_clean)
```

```{r}
filtered_ufc_blue <- ufc_clean[c("BlueReachCms","BlueAvgSigStrLanded",
                                 "WeightClass", "BlueHeightCms", 
                                 "BlueCurrentWinStreak")]
colnames(filtered_ufc_blue) <- c("ReachCms", "AvgSigStrLanded", "WeightClass", 
                                 "Height", "WinStreak")
filtered_ufc_red <- ufc_clean[c("RedReachCms","RedAvgSigStrLanded",
                                "WeightClass", "RedHeightCms", "RedCurrentWinStreak")]
colnames(filtered_ufc_red) <- c("ReachCms", "AvgSigStrLanded", 
                                "WeightClass", "Height", "WinStreak")

# appending the two data sets
ufc_q1 <- rbind(filtered_ufc_blue, filtered_ufc_red)

# exclude outlier(one observation with 0 cm reach)
ufc_q1 <- ufc_q1[ufc_q1$ReachCms > 0,]
ufc_q1 <- ufc_q1[ufc_q1$AvgSigStrLanded > 0, ]

# check missing value: no missing
colSums(is.na(ufc_q1))

```

```{r}
# Log-transform the variables
ufc_q1$LogAvgSigStrLanded <- log(ufc_q1$AvgSigStrLanded)
ufc_q1$LogReachCms <- log(ufc_q1$ReachCms)
model_q1 <- lm(AvgSigStrLanded ~ ReachCms + WeightClass + Height + WinStreak, 
               data = ufc_q1)
summary(model_q1)
```

```{r}
# Load necessary libraries
library(car)          # For VIF
library(ggplot2)      # For residual plots

# 1. Check Variance Inflation Factor (VIF) for collinearity
vif_values <- vif(model_q1)
print("Variance Inflation Factor (VIF):")
print(vif_values)

# 2. Residuals vs Fitted Plot for Linearity
par(mfrow = c(2, 2), mar = c(2, 2, 2, 2))  # Set plotting layout
plot(model_q1)
```

Linearity assumption is not being met as the residuals show a curved pattern or non-linearity.

Polynomial does not work

```{r}
model_q1_int <- lm(AvgSigStrLanded ~ ReachCms + WeightClass*WinStreak + Height, 
               data = ufc_q1)
summary(model_q1_int)

# 1. Check Variance Inflation Factor (VIF) for collinearity
vif_values <- vif(model_q1)
print("Variance Inflation Factor (VIF):")
print(vif_values)

# 2. Residuals vs Fitted Plot for Linearity
par(mfrow = c(2, 2), mar = c(2, 2, 2, 2))  # Set plotting layout
plot(model_q1)
```

Removing influential points

### OPTION: REMOVING INFLUENTIAL POINTS AND TAKING LOG

```{r}
cooks_d <- cooks.distance(model_q1)
influential <- which(cooks_d > (4 / nrow(ufc_q1)))
ufc_q1_clean <- ufc_q1[-influential, ]

model_clean <- lm(AvgSigStrLanded ~ LogReachCms + WeightClass + log(Height) + WinStreak, data = ufc_q1_clean)
summary(model_clean)
par(mfrow = c(2, 2), mar = c(2,2,2,2))
plot(model_clean)
```

This proved somewhat helpful.

Linearity is still an issue.

Addressing the high VIF in the original model:

```{r}
vif(model_clean)
```

### OPTION : INTERACTION TERM - after removing outliers

```{r}
cooks_d_int <- cooks.distance(model_q1_int)
influential_int <- which(cooks_d_int > (4 / nrow(ufc_q1)))
ufc_q1_int_clean <- ufc_q1[-influential_int, ]

model_clean_int <- lm(AvgSigStrLanded ~ LogReachCms + WinStreak * WeightClass + log(Height), data = ufc_q1_int_clean)
summary(model_clean_int)
par(mfrow = c(2, 2), mar = c(2,2,2,2))
plot(model_clean_int)

vif(model_clean_int)
```

### OPTION: INTERACTION TERM WITH THE OG DATA

```{r}
model_int <- lm(AvgSigStrLanded ~ LogReachCms + WinStreak * WeightClass + log(Height), data = ufc_q1)
summary(model_int)
par(mfrow = c(2, 2), mar = c(2,2,2,2))
plot(model_clean_int)

vif(model_int)
```
