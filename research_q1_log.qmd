---
title: "UFC RESEARCH QUESTION 1 LOG TRANSFORM"
author: ""
subtitle: "Due 5th December, 2024"
format: pdf
editor: 
  markdown: 
    wrap: 72
---

```{r}
# Import the CSV into R
ufc <- read.csv("ufc-master.csv")

# View the data
head(ufc)
```

```{r}
filtered_ufc_blue = ufc[!is.na(ufc$BlueAvgSigStrLanded), 
                        c("BlueReachCms","BlueAvgSigStrLanded","WeightClass")]
colnames(filtered_ufc_blue) <- c("ReachCms", "AvgSigStrLanded", "WeightClass")
filtered_ufc_red = ufc[!is.na(ufc$RedAvgSigStrLanded), 
                       c("RedReachCms","RedAvgSigStrLanded","WeightClass")]
colnames(filtered_ufc_red) <- c("ReachCms", "AvgSigStrLanded", "WeightClass")

# appending the two data sets
filtered_ufc = rbind(filtered_ufc_blue, filtered_ufc_red)

# exclude outlier(one observation with 0 cm reach)
filtered_ufc = filtered_ufc[filtered_ufc$ReachCms > 0,]
filtered_ufc <- filtered_ufc[filtered_ufc$AvgSigStrLanded > 0, ]
head(filtered_ufc)
```

```{r}
filtered_ufc$WeightClass = factor(filtered_ufc$WeightClass)

model = lm(AvgSigStrLanded ~ ReachCms * WeightClass, data = filtered_ufc)

summary(model)
```

```{r}
par(mfrow = c(2, 2), mar = c(2, 2, 2, 2)) 
plot(model)  
```

Linearity assumption being violated

Equal variance assumption being violated

Checking the distributions of the outcome and predictor variables

```{r}
# outcome variable
boxplot(filtered_ufc$AvgSigStrLanded, 
        main = "Boxplot of AvgSigStrLanded", 
        ylab = "AvgSigStrLanded",
        col = "lightblue")
```

```{r}
boxplot(filtered_ufc$ReachCms, 
        main = "Boxplot of ReachCms", 
        ylab = "ReachCms",
        col = "lightgreen")
```

```{r}
boxplot(AvgSigStrLanded ~ WeightClass, 
        data = filtered_ufc, 
        main = "Boxplot of AvgSigStrLanded by Weight Class", 
        xlab = "Weight Class", 
        ylab = "AvgSigStrLanded",
        col = "pink",
        las = 2) # Rotate x-axis labels for readability
```

Log transforming all the variables and checking the distribution

```{r}
# Log-transform the variables
filtered_ufc$LogAvgSigStrLanded <- log(filtered_ufc$AvgSigStrLanded)
filtered_ufc$LogReachCms <- log(filtered_ufc$ReachCms)

# Boxplot for log-transformed AvgSigStrLanded
boxplot(filtered_ufc$LogAvgSigStrLanded, 
        main = "Boxplot of Log(AvgSigStrLanded)", 
        ylab = "Log(AvgSigStrLanded)",
        col = "orange")

```

```{r}
# Boxplot for log-transformed ReachCms
boxplot(filtered_ufc$LogReachCms, 
        main = "Boxplot of Log(ReachCms)", 
        ylab = "Log(ReachCms)",
        col = "purple")
```

```{r}
model_log <- lm(LogAvgSigStrLanded ~ LogReachCms * WeightClass, data = filtered_ufc)
summary(model_log)
```

```{r}
par(mfrow = c(2, 2), mar = c(2, 2, 2, 2)) 
plot(model_log)
```
## Log Transformed Model Evaludation

```{r}
# Load necessary libraries
library(car)          # For VIF
library(ggplot2)      # For residual plots

# 1. Check Variance Inflation Factor (VIF) for collinearity
vif_values <- vif(model_log)
print("Variance Inflation Factor (VIF):")
print(vif_values)

# 2. Residuals vs Fitted Plot for Linearity
par(mfrow = c(2, 2))  # Set plotting layout
plot(model_log)

# 3. Normal Q-Q Plot for Normality of Residuals
qqnorm(residuals(model_log))
qqline(residuals(model_log))

# 4. Scale-Location Plot for Homoscedasticity
plot(model_log, which = 3)

# 5. Check for influential points using Cook's Distance
cooksd <- cooks.distance(model_log)
plot(cooksd, type = "h", main = "Cook's Distance", ylab = "Cook's Distance")

# Highlight observations with Cook's Distance > threshold
threshold <- 4 / nrow(filtered_ufc)
influential <- which(cooksd > threshold)
abline(h = threshold, col = "red", lty = 2)
text(x = influential, y = cooksd[influential], labels = names(cooksd[influential]), pos = 4)

# 6. R-squared value
r_squared <- summary(model_log)$r.squared
cat("R-squared:", r_squared, "\n")
```

```{r}
# Load necessary library
library(knitr)

# Create a summary of the model
model_summary <- summary(model_log)

# Extract coefficients and format into a data frame
coef_table <- as.data.frame(model_summary$coefficients)
colnames(coef_table) <- c("Estimate", "Std. Error", "t value", "Pr(>|t|)")

# Create a kable table
kable(coef_table, caption = "Regression Coefficients for model_log", format = "markdown")
```

