---
title: "research_question_2"
format: html
editor: visual
---

## Research question 2:

### Is the fight outcome associated with the number of submission attempts made by a fighter?

-   Outcome Variable (include the name/description and type of variable): Fight outcome (binary variable: Win or Loss)

-   Independent Variable: Primary fight style (nominal variable)

```{r}
library(tidyverse)
library(ggplot2)
library(dplyr)
                       RedAvgSubAtt, BlueAvgSubAtt,TotalFightTimeSecs))
```

You can add options to executable code like this

```{r}
ufc_data = read_csv('ufc-master.csv', show_col_types = FALSE)

# glimpse on variables of interest
glimpse(ufc %>% select(BlueReachCms, RedReachCms, BlueAvgSigStrLanded, 
                       RedAvgSigStrLanded, WeightClass, Winner, 
                       RedAvgSubAtt, BlueAvgSubAtt,TotalFightTimeSecs))
```

The `echo: false` option disables the printing of code (only output is displayed).

```{r}
ufc_data <- ufc_data %>%
  mutate(
    Outcome = ifelse(Winner == "Blue", 1, 0),  # Binary outcome: 1 for Blue win, 0 for Red win
    TotalSubAttempts = BlueAvgSubAtt + RedAvgSubAtt  # Combine submission attempts
  ) %>%
  filter(!is.na(Outcome), !is.na(TotalSubAttempts))  # Remove missing data

# Step 2: Logistic Regression Model
logistic_model <- glm(Outcome ~ TotalSubAttempts, data = ufc_data, family = binomial)

# Summarize the model
summary(logistic_model)

# Odds ratio and confidence intervals
odds_ratio <- exp(coef(logistic_model))
conf_intervals <- exp(confint(logistic_model))
print(odds_ratio)
print(conf_intervals)
```

```{r}

library(ROCR)

# Step 4: ROC Curve and AUC
# Generate predictions and prepare for ROC analysis
prob_predictions <- predict(logistic_model, type = "response")  # Predicted probabilities
pred <- prediction(prob_predictions, ufc_data$Outcome)          # Create a prediction object
perf <- performance(pred, "tpr", "fpr")                         # Calculate performance metrics

# Plot the ROC curve
plot(perf, col = "blue", main = "ROC Curve")
abline(a = 0, b = 1, col = "red", lty = 2)  # Add a reference line for random guessing

# Calculate and display AUC
auc <- performance(pred, "auc")@y.values[[1]]
text(0.6, 0.4, paste("AUC =", round(auc, 2)), col = "blue")

```

summary(logistic_model) will show coefficients for TotalRedSubAttempts and TotalBlueSubAttempts. These coefficients tell you how each fighter's submission attempts affect the probability of a Red win (outcome = 1).

```{r}
# Load necessary libraries
library(dplyr)
library(broom)  # For tidy model outputs
library(ggplot2)

# Step 1: Data Preparation
ufc_data <- ufc_data %>%
  mutate(
    Outcome = ifelse(Winner == "Red", 1, 0),  # Binary outcome: 1 for Red win, 0 for Blue win
    TotalRedSubAttempts = RedAvgSubAtt,        # Red's submission attempts
    TotalBlueSubAttempts = BlueAvgSubAtt      # Blue's submission attempts
  ) %>%
  filter(!is.na(Outcome), !is.na(TotalRedSubAttempts), !is.na(TotalBlueSubAttempts))  # Remove missing data

# Step 2: Logistic Regression Model
logistic_model <- glm(Outcome ~ TotalRedSubAttempts + TotalBlueSubAttempts, 
                      data = ufc_data, family = binomial)

# Step 3: Model Summary
summary(logistic_model)

# Step 4: Odds Ratios (Exponentiate the coefficients)
exp(coef(logistic_model))

# Step 5: Visualize the effect of submission attempts on the outcome (with odds ratios and confidence intervals)
tidy_model <- tidy(logistic_model)
tidy_model <- tidy_model %>%
  mutate(
    OddsRatio = exp(estimate),
    LowerCI = exp(estimate - 1.96 * std.error),
    UpperCI = exp(estimate + 1.96 * std.error)
  )

# Plotting the odds ratios and confidence intervals for submission attempts by Red and Blue fighters
ggplot(tidy_model, aes(x = term, y = OddsRatio)) +
  geom_point() +
  geom_errorbar(aes(ymin = LowerCI, ymax = UpperCI), width = 0.2) +
  labs(
    title = "Odds Ratios for Submission Attempts by Red and Blue Fighters",
    x = "Fighter and Submission Attempts",
    y = "Odds Ratio (with 95% CI)"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))



```
