---
title: "research_question_2"
format: html
editor: visual
---

## Research question 2:

### Is the fight outcome associated with the number of submission attempts made by a fighter?

-   Outcome Variable (include the name/description and type of variable): Fight outcome (binary variable: Win or Loss)

-   Independent Variable: Primary fight style (nominal variable)

```{r}
library(tidyverse)
library(ggplot2)
library(dplyr)
```

You can add options to executable code like this

```{r}
ufc_data = read_csv('ufc-master.csv', show_col_types = FALSE)
```

```{r}


# glimpse on variables of interest
glimpse(ufc_data %>% select(BlueReachCms, RedReachCms, BlueAvgSigStrLanded, 
                       RedAvgSigStrLanded, WeightClass, Winner, 
                       RedAvgSubAtt, BlueAvgSubAtt,TotalFightTimeSecs))
```

```{r}
library(dplyr)
library(broom)  # For tidy model outputs
library(ggplot2)
library(tidyr)

# Step 1: Data Preparation
# Checking the structure of the data
str(ufc_data)

# Step 2: Exploratory Data Analysis (EDA)

# Check for null values in each column
missing_values <- ufc_data %>%
  summarise(across(everything(), ~sum(is.na(.)))) %>%
  pivot_longer(cols = everything(), names_to = "Variable", values_to = "Missing_Count")

print("Missing values in each column:")
print(missing_values)
```

```{r}

summary_stats <- ufc_data %>%
  summarise(across(where(is.numeric), list(mean = mean, sd = sd, median = median, min = min, max = max), na.rm = TRUE)) %>%
  pivot_longer(cols = everything(), names_to = c("Variable", ".value"), names_sep = "_")

print("Summary statistics for numerical variables:")
print(summary_stats)


```

```{r}
# Distribution of fight outcomes
ggplot(ufc_data, aes(x = Winner, fill = Winner)) +
  geom_bar() +
  labs(
    title = "Distribution of Fight Outcomes",
    x = "Winner",
    y = "Count",
    fill = "Winner"
  ) +
  theme_minimal()

# Distribution of Total Fight Time
ggplot(ufc_data, aes(x = TotalFightTimeSecs)) +
  geom_histogram(binwidth = 100, fill = "blue", alpha = 0.7) +
  labs(
    title = "Distribution of Total Fight Time",
    x = "Total Fight Time (seconds)",
    y = "Frequency"
  ) +
  theme_minimal()

```

```{r}
ufc_data <- ufc_data %>%
  mutate(
    Outcome = ifelse(Winner == "Red", 1, 0),  # Binary outcome: 1 for Red win, 0 for Blue win
    WeightClass = as.factor(WeightClass), 
    TotalRedSubAttempts = RedAvgSubAtt,        # Red's submission attempts
    TotalBlueSubAttempts = BlueAvgSubAtt # Convert WeightClass to a factor for glm()
  ) %>%
  filter(
    !is.na(Outcome), 
    !is.na(TotalRedSubAttempts), 
    !is.na(TotalBlueSubAttempts),
    !is.na(BlueReachCms), 
    !is.na(RedReachCms), 
    !is.na(BlueAvgSigStrLanded), 
    !is.na(RedAvgSigStrLanded),
    !is.na(TotalFightTimeSecs),
    !is.na(WeightClass)  # Remove rows with missing data in new variables
  )
ufc_data$RedBlueSubRatio <- ufc_data$TotalRedSubAttempts / ufc_data$TotalBlueSubAttempts
ufc_data$ReachRatio <- ufc_data$RedReachCms / ufc_data$BlueReachCms
ufc_data$SigStrRatio <- ufc_data$RedAvgSigStrLanded/ ufc_data$BlueAvgSigStrLanded

ufc_data_clean <- ufc_data %>%
  filter(
    !is.na(RedBlueSubRatio), !is.na(ReachRatio), !is.na(SigStrRatio),
    !is.na(TotalFightTimeSecs), !is.na(WeightClass)
  ) %>%
  filter(
    !is.infinite(RedBlueSubRatio), !is.infinite(ReachRatio), !is.infinite(SigStrRatio),
    !is.infinite(TotalFightTimeSecs)
  )

dim(ufc_data_clean)

```

A logistic regression w/o any feature engineering:

```{r}
sim_logistic_model <- glm(
  Outcome ~ 
    TotalRedSubAttempts + 
    TotalBlueSubAttempts + 
    BlueReachCms + 
    RedReachCms + 
    BlueAvgSigStrLanded + 
    RedAvgSigStrLanded + 
    TotalFightTimeSecs + 
    WeightClass,  # WeightClass as a factor
  data = ufc_data_clean, 
  family = binomial
)

# Show the model summary
summary(sim_logistic_model)

par(mfrow=c(2,2), mar = c(2,2,2,2))


plot(sim_logistic_model)
```

A logistic regression with feature engineered ratios:

summary(logistic_model)

par(mfrow=c(2,2), mar = c(2,2,2,2))

plot(logistic_model)

```{r}

logistic_model <- glm(
  Outcome ~ 
    RedBlueSubRatio +
    ReachRatio +
    SigStrRatio +
    TotalFightTimeSecs + WeightClass,  # WeightClass is now handled as a factor
  data = ufc_data_clean, 
  family = binomial
)

# Step 3: Model Summary
summary(logistic_model)

par(mfrow=c(2,2), mar = c(2,2,2,2))


plot(logistic_model)




```

```{r}
library(car)
vif(logistic_model)
```

Adding interaction terms:

```{r}
ext_logistic_model <- glm(
  Outcome ~ 
    RedBlueSubRatio +
    ReachRatio +
    SigStrRatio +
    TotalFightTimeSecs + 
    WeightClass + 
    RedBlueSubRatio:ReachRatio +       # Interaction between RedBlueSubRatio and ReachRatio
    RedBlueSubRatio:SigStrRatio +      # Interaction between RedBlueSubRatio and SigStrRatio
    ReachRatio:SigStrRatio +           # Interaction between ReachRatio and SigStrRatio
    RedBlueSubRatio:TotalFightTimeSecs +  # Interaction between RedBlueSubRatio and TotalFightTimeSecs
    ReachRatio:TotalFightTimeSecs +       # Interaction between ReachRatio and TotalFightTimeSecs
    SigStrRatio:TotalFightTimeSecs +     # Interaction between SigStrRatio and TotalFightTimeSecs
    WeightClass:RedBlueSubRatio +       # Interaction between WeightClass and RedBlueSubRatio
    WeightClass:ReachRatio +            # Interaction between WeightClass and ReachRatio
    WeightClass:SigStrRatio +           # Interaction between WeightClass and SigStrRatio
    WeightClass:TotalFightTimeSecs     # Interaction between WeightClass and TotalFightTimeSecs
  ,
  data = ufc_data_clean, 
  family = binomial
)

```

```{r}
summary(ext_logistic_model)

par(mfrow=c(2,2), mar = c(2,2,2,2))


plot(ext_logistic_model)
```

```{r}
step_model <- step(ext_logistic_model, direction = "both")
summary(step_model)
```

```{r}
vif(step_model)
```

```{r}
par(mfrow=c(2,2), mar = c(2,2,2,2))

plot(step_model)
```

Robust regression:\

```{r}
# Trim the data
# Calculate influence measures
influence <- influence.measures(step_model)

# Get Cook's Distance
cooks_distance <- cooks.distance(step_model)

# Get Leverage (Hat values)
hat_values <- hatvalues(step_model)

# Find large residuals
residuals <- residuals(step_model, type = "deviance")


```

```{r}
# Thresholds
n <- nrow(ufc_data_clean)  # Number of rows
p <- length(coef(step_model)) - 1  # Number of predictors
cooks_threshold <- 4 / n
leverage_threshold <- 2 * (p + 1) / n

# Find influential points
influential_points <- which(cooks_distance > cooks_threshold | 
                            hat_values > leverage_threshold |
                            abs(residuals) > 2)

# Print the indices of influential points
print(influential_points)

# View the rows with extreme points
ufc_data_clean[influential_points, ]

```

```{r}
# Remove influential points
ufc_data_clean_filtered <- ufc_data_clean[-influential_points, ]

# Refit the model
final_model <- glm(
  formula = Outcome ~ RedBlueSubRatio + ReachRatio + SigStrRatio + 
             TotalFightTimeSecs + WeightClass + RedBlueSubRatio:SigStrRatio + 
             SigStrRatio:TotalFightTimeSecs + SigStrRatio:WeightClass,
  family = binomial,
  data = ufc_data_clean_filtered
)

# Summary of the refitted model
summary(final_model)

```

```{r}
par(mfrow=c(2,2), mar = c(2,2,2,2))

plot(final_model)
```

```{r}
# Calculate leverage and Cook's distance
influence <- influence.measures(final_model)
cooks_distance <- cooks.distance(final_model)
leverage <- hatvalues(final_model)

# Define a threshold for Cook's distance
cooks_threshold <- 4 / nrow(ufc_data_clean_filtered)

# Inspect influential Cook's distance values
plot(cooks_distance, main = "Cook's Distance", ylab = "Cook's Distance")
abline(h = cooks_threshold, col = "red", lty = 2)

# Check points above the threshold
influential_cooks <- which(cooks_distance > cooks_threshold)
print(influential_cooks)

```

```{r}
# Define weights based on Cook's distance
weights <- ifelse(cooks_distance < cooks_threshold, 1, cooks_threshold / cooks_distance)

# Add weights to the dataset
ufc_data_clean_filtered$weights <- weights

```

```{r}
# Fit the weighted logistic regression model
final_model_weighted <- glm(
  formula = Outcome ~ RedBlueSubRatio + ReachRatio + SigStrRatio + 
             TotalFightTimeSecs + WeightClass + RedBlueSubRatio:SigStrRatio + 
             SigStrRatio:TotalFightTimeSecs + SigStrRatio:WeightClass,
  family = binomial,
  data = ufc_data_clean_filtered,
  weights = weights
)

# Summary of the weighted model
summary(final_model_weighted)

```

```{r}
# Generate diagnostic plots
par(mfrow = c(2, 2))  # 2x2 layout
plot(final_model_weighted)

# Check for remaining influential points
cooks_distance_weighted <- cooks.distance(final_model_weighted)
plot(cooks_distance_weighted, main = "Cook's Distance (Weighted Model)", ylab = "Cook's Distance")
abline(h = cooks_threshold, col = "red", lty = 2)

```

```{r}
vif(final_model_weighted)
```
