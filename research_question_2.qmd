---
title: "research_question_2"
format: html
editor: visual
---

## Research question 2:

### Is the fight outcome associated with the number of submission attempts made by a fighter?

-   Outcome Variable (include the name/description and type of variable): Fight outcome (binary variable: Win or Loss)

-   Independent Variable: Primary fight style (nominal variable)

```{r}
library(tidyverse)
library(ggplot2)
library(dplyr)
```

You can add options to executable code like this

```{r}
ufc_data = read_csv('ufc-master.csv', show_col_types = FALSE)
```

```{r}


# glimpse on variables of interest
glimpse(ufc_data %>% select(BlueReachCms, RedReachCms, BlueAvgSigStrLanded, 
                       RedAvgSigStrLanded, WeightClass, Winner, 
                       RedAvgSubAtt, BlueAvgSubAtt,TotalFightTimeSecs))
```

```{r}
library(dplyr)
library(broom)  # For tidy model outputs
library(ggplot2)
library(tidyr)

# Step 1: Data Preparation
# Checking the structure of the data
str(ufc_data)

# Step 2: Exploratory Data Analysis (EDA)

# Check for null values in each column
missing_values <- ufc_data %>%
  summarise(across(everything(), ~sum(is.na(.)))) %>%
  pivot_longer(cols = everything(), names_to = "Variable", values_to = "Missing_Count")

print("Missing values in each column:")
print(missing_values)
```

```{r}

summary_stats <- ufc_data %>%
  summarise(across(where(is.numeric), list(mean = mean, sd = sd, median = median, min = min, max = max), na.rm = TRUE)) %>%
  pivot_longer(cols = everything(), names_to = c("Variable", ".value"), names_sep = "_")

print("Summary statistics for numerical variables:")
print(summary_stats)


```

```{r}
# Distribution of fight outcomes
ggplot(ufc_data, aes(x = Winner, fill = Winner)) +
  geom_bar() +
  labs(
    title = "Distribution of Fight Outcomes",
    x = "Winner",
    y = "Count",
    fill = "Winner"
  ) +
  theme_minimal()

# Distribution of Total Fight Time
ggplot(ufc_data, aes(x = TotalFightTimeSecs)) +
  geom_histogram(binwidth = 100, fill = "blue", alpha = 0.7) +
  labs(
    title = "Distribution of Total Fight Time",
    x = "Total Fight Time (seconds)",
    y = "Frequency"
  ) +
  theme_minimal()

```

```{r}
library(dplyr)
library(broom)  # For tidy model outputs
library(ggplot2)

# Step 1: Data Cleaning and Transformation
ufc_data <- ufc_data %>%
  mutate(
    Outcome = ifelse(Winner == "Red", 1, 0),  # Binary outcome: 1 for Red win, 0 for Blue win
    WeightClass = as.factor(WeightClass), 
    TotalRedSubAttempts = RedAvgSubAtt,        # Red's submission attempts
    TotalBlueSubAttempts = BlueAvgSubAtt # Convert WeightClass to a factor for glm()
  ) %>%
  filter(
    !is.na(Outcome), 
    !is.na(TotalRedSubAttempts), 
    !is.na(TotalBlueSubAttempts),
    !is.na(BlueReachCms), 
    !is.na(RedReachCms), 
    !is.na(BlueAvgSigStrLanded), 
    !is.na(RedAvgSigStrLanded),
    !is.na(TotalFightTimeSecs),
    !is.na(WeightClass)  # Remove rows with missing data in new variables
  )

dim(ufc_data)

# Step 2: Extended Logistic Regression Model
logistic_model <- glm(
  Outcome ~ 
    TotalRedSubAttempts + TotalBlueSubAttempts +
    BlueReachCms + RedReachCms +
    BlueAvgSigStrLanded + RedAvgSigStrLanded +
    TotalFightTimeSecs + WeightClass,  # WeightClass is now handled as a factor
  data = ufc_data, 
  family = binomial
)

# Step 3: Model Summary
summary(logistic_model)




```

```{r}
deviance_residuals <- residuals(logistic_model, type = "deviance")
# Plot deviance residuals
plot(deviance_residuals, 
     main = "Deviance Residuals for Logistic Regression", 
     ylab = "Deviance Residuals", 
     xlab = "Index", 
     pch = 16, 
     col = "blue")


```

```{r}
ext_logistic_model <- glm(
  Outcome ~ 
    TotalRedSubAttempts + TotalBlueSubAttempts +
    BlueReachCms + RedReachCms +
    BlueAvgSigStrLanded + RedAvgSigStrLanded +
    TotalFightTimeSecs + WeightClass +
    TotalRedSubAttempts * TotalBlueSubAttempts +
    BlueReachCms * RedReachCms +
    BlueAvgSigStrLanded * RedAvgSigStrLanded +
    TotalFightTimeSecs * WeightClass,
  data = ufc_data, 
  family = binomial
)

summary(ext_logistic_model)

deviance_residuals <- residuals(ext_logistic_model, type = "deviance")
# Plot deviance residuals
plot(deviance_residuals, 
     main = "Deviance Residuals for Logistic Regression", 
     ylab = "Deviance Residuals", 
     xlab = "Index", 
     pch = 16, 
     col = "blue")
```

```{r}
# Load required libraries
library(mgcv)
library(ggplot2)

# Step 1: Fit the GAM model
gam_model <- gam(Outcome ~ s(TotalRedSubAttempts) + s(TotalBlueSubAttempts) +
                 s(BlueReachCms) + s(RedReachCms) +
                 s(BlueAvgSigStrLanded) + s(RedAvgSigStrLanded) +
                 TotalFightTimeSecs + WeightClass,
                 family = binomial, data = ufc_data)

# Step 2: Extract residuals (deviance residuals)
deviance_residuals <- residuals(gam_model, type = "deviance")
# Plot deviance residuals
plot(deviance_residuals, 
     main = "Deviance Residuals for Logistic Regression", 
     ylab = "Deviance Residuals", 
     xlab = "Index", 
     pch = 16, 
     col = "blue")


```

### 
